// This is auto-generated by Datastar. DO NOT EDIT.

namespace StarFederation.Datastar;

using System;

public enum ElementPatchMode
{
    /// Morphs the element into the existing element using Datastar&#39;s morphing, preserving focus and minimizing element changes.
    Outer,
    /// Morphs the element into the innerHTML using Datastar&#39;s morphing, preserving focus and minimizing element changes.
    Inner,
    /// Removes the existing element from the DOM.
    Remove,
    /// Prepends the element inside the existing element.
    Prepend,
    /// Appends the element inside the existing element.
    Append,
    /// Inserts the element before the existing element.
    Before,
    /// Inserts the element after the existing element.
    After,
    /// Do not morph, simply replace the whole element and reset any related state.
    Replace,

}
public enum EventType
{
    /// An event for patching HTML elements into the DOM.
    PatchElements,
    /// An event for patching signals.
    PatchSignals,

}

public static class Consts
{
    public const string DatastarKey = "datastar";
    public const string Version     = "1.0.0-RC.12";

    /// Default: TimeSpan.FromMilliseconds 1000
    public static readonly TimeSpan DefaultSseRetryDuration = TimeSpan.FromMilliseconds(1000);


    /// Default: outer - Morphs the element into the existing element using Datastar&#39;s morphing, preserving focus and minimizing element changes.
    public const ElementPatchMode DefaultElementPatchMode = ElementPatchMode.Outer;

    public const bool DefaultElementsUseViewTransitions = false;
    public const bool DefaultPatchSignalsOnlyIfMissing = false;


    public const string DatastarDatalineSelector = "selector";
    public const string DatastarDatalineMode = "mode";
    public const string DatastarDatalineElements = "elements";
    public const string DatastarDatalineUseViewTransition = "useViewTransition";
    public const string DatastarDatalineSignals = "signals";
    public const string DatastarDatalineOnlyIfMissing = "onlyIfMissing";

    public static string EnumToString( ElementPatchMode enumValue ) => enumValue switch {
        ElementPatchMode.Outer => "outer",
        ElementPatchMode.Inner => "inner",
        ElementPatchMode.Remove => "remove",
        ElementPatchMode.Prepend => "prepend",
        ElementPatchMode.Append => "append",
        ElementPatchMode.Before => "before",
        ElementPatchMode.After => "after",
        ElementPatchMode.Replace => "replace",
        _ => throw new NotImplementedException($"ElementPatchMode.{enumValue}")
    };
    public static string EnumToString( EventType enumValue ) => enumValue switch {
        EventType.PatchElements => "datastar-patch-elements",
        EventType.PatchSignals => "datastar-patch-signals",
        _ => throw new NotImplementedException($"EventType.{enumValue}")
    };
}